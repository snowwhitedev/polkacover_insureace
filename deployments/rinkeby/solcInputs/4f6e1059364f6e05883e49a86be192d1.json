{
  "language": "Solidity",
  "sources": {
    "contracts/ExchangeAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./libs/TransferHelper.sol\";\nimport {IUniswapV2Pair} from \"./interfaces/IUniswapV2Pair.sol\";\nimport {IUniswapV2Factory} from \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\n\n/**\n * @dev This smart contract is for getting CVR_ETH, CVR_USDT price\n */\ncontract ExchangeAgent is Ownable, IExchangeAgent, ReentrancyGuard {\n    event AddedGateway(address _sender, address _gateway);\n    event RemovedGateway(address _sender, address _gateway);\n    event SetCurrency(address _sender, address _currency, address _pair);\n    event RemovedCurrency(address _sender, address _currency);\n\n    mapping(address => bool) public whiteList; // white listed polka gateways\n    // available currencies in Polkacover, token => pair\n    // for now we allow CVR\n    mapping(address => bool) public availableCurrencies;\n\n    address public immutable USDC_ADDRESS;\n    address public immutable WETH;\n    address public immutable UNISWAP_FACTORY;\n\n    constructor(\n        address _USDC_ADDRESS,\n        address _WETH,\n        address _UNISWAP_FACTORY\n    ) {\n        USDC_ADDRESS = _USDC_ADDRESS;\n        WETH = _WETH;\n        UNISWAP_FACTORY = _UNISWAP_FACTORY;\n    }\n\n    receive() external payable {}\n\n    modifier onlyWhiteListed(address _gateway) {\n        require(whiteList[_gateway], \"Only white listed addresses are acceptable\");\n        _;\n    }\n\n    /**\n     * @dev Get needed _token0 amount for _desiredAmount of _token1\n     */\n    function _getNeededTokenAmount(\n        address _token0,\n        address _token1,\n        uint256 _desiredAmount\n    ) private view returns (uint256) {\n        address pair = IUniswapV2Factory(UNISWAP_FACTORY).getPair(_token0, _token1);\n        require(pair != address(0), \"There's no stable pair\");\n\n        address token0 = IUniswapV2Pair(pair).token0();\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves();\n\n        uint256 denominator;\n        uint256 numerator;\n        if (_token0 == token0) {\n            denominator = reserve1;\n            numerator = reserve0 * _desiredAmount;\n        } else {\n            denominator = reserve0;\n            numerator = reserve1 * _desiredAmount;\n        }\n\n        return (numerator * (10**IERC20Metadata(_token0).decimals())) / denominator;\n    }\n\n    /**\n     * @dev Get needed _token0 amount for _desiredAmount of _token1\n     */\n    function getNeededTokenAmount(\n        address _token0,\n        address _token1,\n        uint256 _desiredAmount\n    ) external view override returns (uint256) {\n        return _getNeededTokenAmount(_token0, _token1, _desiredAmount);\n    }\n\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external view override returns (uint256) {\n        return _getNeededTokenAmount(_token, USDC_ADDRESS, _desiredAmount);\n    }\n\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external view override returns (uint256) {\n        return _getNeededTokenAmount(_token, WETH, _desiredAmount);\n    }\n\n    /**\n     * @param _amount: this one is the value with decimals\n     */\n    function swapTokenWithETH(address _token, uint256 _amount) external override onlyWhiteListed(msg.sender) nonReentrant {\n        // store CVR in this exchagne contract\n        // send eth to buy gateway based on the uniswap price\n        require(availableCurrencies[_token], \"Token should be added in available list\");\n        _swapTokenWithToken(_token, WETH, _amount);\n    }\n\n    function swapTokenWithToken(\n        address _token0,\n        address _token1,\n        uint256 _amount\n    ) external override onlyWhiteListed(msg.sender) nonReentrant {\n        require(availableCurrencies[_token0], \"Token should be added in available list\");\n        _swapTokenWithToken(_token0, _token1, _amount);\n    }\n\n    /**\n     * @dev exchange _amount of _token0 with _token1\n     */\n    function _swapTokenWithToken(\n        address _token0,\n        address _token1,\n        uint256 _amount\n    ) private {\n        address pair = IUniswapV2Factory(UNISWAP_FACTORY).getPair(_token0, _token1);\n        require(pair != address(0), \"There's no stable pair\");\n\n        address token0 = IUniswapV2Pair(pair).token0();\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves();\n\n        uint256 denominator;\n        uint256 numerator;\n        if (_token0 == token0) {\n            denominator = reserve0;\n            numerator = reserve1 * _amount;\n        } else {\n            denominator = reserve1;\n            numerator = reserve0 * _amount;\n        }\n\n        uint256 value = numerator / denominator;\n        require(value <= address(this).balance, \"Insufficient ETH balance\");\n\n        TransferHelper.safeTransferFrom(_token0, msg.sender, address(this), _amount);\n\n        if (_token1 == WETH) {\n            TransferHelper.safeTransferETH(msg.sender, value);\n        } else {\n            TransferHelper.safeTransfer(_token1, msg.sender, value);\n        }\n    }\n\n    function addWhiteList(address _gateway) external onlyOwner {\n        require(!whiteList[_gateway], \"Already white listed\");\n        whiteList[_gateway] = true;\n    }\n\n    function removeWhiteList(address _gateway) external onlyOwner {\n        require(whiteList[_gateway], \"Not white listed\");\n        whiteList[_gateway] = false;\n    }\n\n    function addCurrency(address _currency) external onlyOwner {\n        require(!availableCurrencies[_currency], \"Already available\");\n        availableCurrencies[_currency] = true;\n    }\n\n    function removeCurrency(address _currency) external onlyOwner {\n        require(availableCurrencies[_currency], \"Not available yet\");\n        availableCurrencies[_currency] = false;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/libs/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeApprove: approve failed\");\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeTransfer: transfer failed\");\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::transferFrom: transferFrom failed\");\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Pair {\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\ninterface IUniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n"
    },
    "contracts/interfaces/IExchangeAgent.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\ninterface IExchangeAgent {\n    function getNeededTokenAmount(\n        address _token0,\n        address _token1,\n        uint256 _desiredAmount\n    ) external returns (uint256);\n\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\n\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\n\n    function swapTokenWithETH(address _token, uint256 _amount) external;\n\n    function swapTokenWithToken(\n        address _token0,\n        address _token1,\n        uint256 _amount\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/onchain/NsureNetworkPolka.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"../interfaces/IExchangeAgent.sol\";\nimport \"../libs/TransferHelper.sol\";\nimport \"./BasePolkaOnChain.sol\";\n\ncontract NsureNetworkPolka {}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n  /**\n   * @dev Implementation of the {IERC721Receiver} interface.\n   *\n   * Accepts all token transfers.\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n   */\ncontract ERC721Holder is IERC721Receiver {\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/onchain/BasePolkaOnChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BasePolkaOnChain is Ownable {\n    using Counters for Counters.Counter;\n\n    event BuyProduct(uint256 indexed _productId, address _buyer);\n\n    Counters.Counter public productIds;\n    mapping(uint256 => address) private _ownerOf; // productId => owner\n    mapping(address => uint64) private _balanceOf; // owner => balance We can think one user can buy max 2**64 products\n    mapping(address => uint64[]) private _productsOf; // owner => productIds[]\n    mapping(address => bool) public availableCurrencies;\n\n    address public immutable WETH;\n    // TODO should it be public?\n    address public exchangeAgent;\n\n    /**\n     * @dev _WETH depends on what address partners uses for WETH on their smart contract\n     */\n    constructor(\n        address _WETH,\n        address _CVR,\n        address _exchangeAgent\n    ) {\n        WETH = _WETH;\n        availableCurrencies[_CVR] = true;\n        exchangeAgent = _exchangeAgent;\n    }\n\n    modifier onlyAvailableToken(address _token) {\n        require(availableCurrencies[_token], \"Not allowed token\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function _setProductOwner(uint256 _prodId, address _owner) internal {\n        _ownerOf[_prodId] = _owner;\n    }\n\n    function ownerOf(uint256 _prodId) public view returns (address) {\n        return _ownerOf[_prodId];\n    }\n\n    function _increaseBalance(address _account) internal {\n        _balanceOf[_account]++;\n    }\n\n    function balanceOf(address _account) public view returns (uint64) {\n        return _balanceOf[_account];\n    }\n\n    function _buyProduct(address _buyer, uint256 _pid) internal {\n        require(_pid < productIds.current(), \"Invalid product ID\");\n        _productsOf[_buyer].push(uint64(_pid));\n        emit BuyProduct(_pid, _buyer);\n    }\n\n    function productOf(address _owner, uint64 _idx) public view returns (uint64) {\n        return _productsOf[_owner][_idx];\n    }\n\n    function addCurrency(address _currency) external onlyOwner {\n        require(!availableCurrencies[_currency], \"Already available\");\n        availableCurrencies[_currency] = true;\n    }\n\n    function removeCurrency(address _currency) external onlyOwner {\n        require(availableCurrencies[_currency], \"Not available yet\");\n        availableCurrencies[_currency] = false;\n    }\n\n    function permit(\n        address _sender,\n        bytes32 _digest,\n        bytes memory sig\n    ) internal pure virtual {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\n        address recoveredAddress = ecrecover(_digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == _sender, \"PolkaCompare: INVALID_SIGNATURE\");\n    }\n\n    function splitSignature(bytes memory sig)\n        public\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        require(sig.length == 65, \"invalid signature length\");\n\n        assembly {\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n}\n"
    },
    "contracts/onchain/NexusMutualPolka.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport {INexusMutual} from \"../interfaces/INexusMutual.sol\";\nimport {INexusMutualGateway} from \"../interfaces/INexusMutualGateway.sol\";\nimport \"../interfaces/IExchangeAgent.sol\";\nimport \"../libs/TransferHelper.sol\";\nimport \"./BasePolkaOnChain.sol\";\n\ncontract NexusMutualPolka is ERC721Holder, BasePolkaOnChain {\n    address public nexusGateWay;\n\n    constructor(\n        address _WETH,\n        address _CVR,\n        address _exchangeAgent,\n        address _nexusGateWay\n    ) BasePolkaOnChain(_WETH, _CVR, _exchangeAgent) {\n        nexusGateWay = _nexusGateWay;\n    }\n\n    function getProductPrice(\n        address _distributor,\n        address contractAddress,\n        address coverAsset,\n        uint256 sumAssured,\n        uint16 coverPeriod,\n        uint8 coverType,\n        bytes calldata data\n    ) public view returns (uint256) {\n        uint256 coverPrice = INexusMutualGateway(nexusGateWay).getCoverPrice(\n            contractAddress,\n            coverAsset,\n            sumAssured,\n            coverPeriod,\n            INexusMutualGateway.CoverType(coverType),\n            data\n        );\n        uint256 _feePercentage = INexusMutual(_distributor).feePercentage();\n        uint256 coverPriceWithFee = (_feePercentage * coverPrice) / 10000 + coverPrice;\n\n        return coverPriceWithFee;\n    }\n\n    /**\n     * User will buy product directly using his ETH\n     */\n    function buyCoverByETH(\n        address _distributor,\n        address contractAddress,\n        address coverAsset,\n        uint256 sumAssured,\n        uint16 coverPeriod,\n        uint8 coverType,\n        uint256 maxPriceWithFee,\n        bytes calldata data\n    ) external payable {\n        address _weth = INexusMutual(_distributor).WETH();\n        require(coverAsset == _weth, \"Should pay in ETH\");\n        uint256 productPrice = getProductPrice(\n            _distributor,\n            contractAddress,\n            coverAsset,\n            sumAssured,\n            coverPeriod,\n            coverType,\n            data\n        );\n\n        require(msg.value >= productPrice, \"Insufficient amount\");\n        if (msg.value > productPrice) {\n            TransferHelper.safeTransferETH(msg.sender, msg.value - productPrice);\n        }\n\n        uint256 productId = INexusMutual(_distributor).buyCover{value: productPrice}(\n            contractAddress,\n            coverAsset,\n            sumAssured,\n            coverPeriod,\n            coverType,\n            maxPriceWithFee,\n            data\n        );\n\n        buyCover(_distributor, productId);\n    }\n\n    // TODO check _token can be ETH?\n    function buyCoverByToken(\n        address _token,\n        address _distributor,\n        address contractAddress,\n        address coverAsset,\n        uint256 sumAssured,\n        uint16 coverPeriod,\n        uint8 coverType,\n        uint256 maxPriceWithFee,\n        bytes calldata data\n    ) external onlyAvailableToken(_token) {\n        uint256 productPrice = getProductPrice(\n            _distributor,\n            contractAddress,\n            coverAsset,\n            sumAssured,\n            coverPeriod,\n            coverType,\n            data\n        );\n\n        uint256 amount;\n        uint256 value;\n        if (coverAsset == INexusMutual(_distributor).WETH()) {\n            amount = IExchangeAgent(exchangeAgent).getTokenAmountForETH(_token, productPrice);\n            TransferHelper.safeTransferFrom(_token, msg.sender, address(this), amount);\n            TransferHelper.safeApprove(_token, exchangeAgent, amount);\n            IExchangeAgent(exchangeAgent).swapTokenWithETH(_token, amount);\n            value = productPrice;\n        } else {\n            amount = IExchangeAgent(exchangeAgent).getNeededTokenAmount(_token, coverAsset, productPrice);\n            TransferHelper.safeTransferFrom(_token, msg.sender, address(this), amount);\n            TransferHelper.safeApprove(_token, exchangeAgent, amount);\n            IExchangeAgent(exchangeAgent).swapTokenWithToken(_token, coverAsset, amount);\n        }\n\n        uint256 productId = INexusMutual(_distributor).buyCover{value: productPrice}(\n            contractAddress,\n            coverAsset,\n            sumAssured,\n            coverPeriod,\n            coverType,\n            maxPriceWithFee,\n            data\n        );\n\n        buyCover(_distributor, productId);\n    }\n\n    function buyCover(address _distributor, uint256 productId) private {\n        _setProductOwner(productId, msg.sender);\n        _increaseBalance(msg.sender);\n        _buyProduct(msg.sender, productId);\n\n        // Transfer ERC721 to msg.sender\n        IERC721(_distributor).transferFrom(address(this), msg.sender, productId);\n        // emit PurchasedProduct(_distributor, \"NexusMutual\", productId, msg.sender, coverAsset, coverPrice);\n    }\n}\n"
    },
    "contracts/interfaces/INexusMutual.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\ninterface INexusMutual {\n    function buyCover(\n        address contractAddress,\n        address coverAsset,\n        uint256 sumAssured,\n        uint16 coverPeriod,\n        uint8 coverType,\n        uint256 maxPriceWithFee,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function WETH() external view returns (address);\n\n    function feePercentage() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/INexusMutualGateway.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.0;\n\ninterface INexusMutualGateway {\n    enum ClaimStatus {\n        IN_PROGRESS,\n        ACCEPTED,\n        REJECTED\n    }\n    enum CoverType {\n        SIGNED_QUOTE_CONTRACT_COVER\n    }\n\n    function getCoverPrice(\n        address contractAddress,\n        address coverAsset,\n        uint256 sumAssured,\n        uint16 coverPeriod,\n        CoverType coverType,\n        bytes calldata data\n    ) external view returns (uint256 coverPrice);\n}\n"
    },
    "contracts/onchain/InsureAcePolka.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport {IInsureAce} from \"../interfaces/IInsureAce.sol\";\nimport \"../libs/TransferHelper.sol\";\nimport \"./BasePolkaOnChain.sol\";\n\ncontract BuyCoverExample is BasePolkaOnChain {\n    using SafeMathUpgradeable for uint256;\n\n    // function initializeLocalBuyCoverExample() public initializer {\n    //     __Ownable_init();\n    // }\n\n    address public coverContractAddress;\n\n    constructor(\n        address _WETH,\n        address _CVR,\n        address _exchangeAgent,\n        address _coverContractAddress\n    ) BasePolkaOnChain(_WETH, _CVR, _exchangeAgent) {\n        require(_coverContractAddress != address(0), \"S:1\");\n        coverContractAddress = _coverContractAddress;\n    }\n\n    function setup(address _coverContractAddress) external onlyOwner {\n        require(_coverContractAddress != address(0), \"S:1\");\n        coverContractAddress = _coverContractAddress;\n    }\n\n    // function buyCoverByETH(\n    //     uint16[] memory products,\n    //     uint16[] memory durationInDays,\n    //     uint256[] memory amounts,\n    //     address currency,\n    //     address owner,\n    //     uint256 referralCode,\n    //     uint256 premiumAmount,\n    //     uint256[] memory helperParameters,\n    //     uint256[] memory securityParameters,\n    //     uint8[] memory v,\n    //     bytes32[] memory r,\n    //     bytes32[] memory s\n    // ) external payable {\n    //     require(coverContractAddress != address(0), \"myOwnBuyCoverFunc:1\");\n    //     uint totalAmount;\n    //     uint len = amounts.length;\n    //     uint ii;\n    //     for(ii = 0; ii < len; ii++) {\n    //         totalAmount += amounts[ii];\n    //     }\n    //     // require(msg.value >= totalAmount, \"Insufficient amount\");\n    //     // if (msg.value - totalAmount > 0) {\n    //     //     TransferHelper.safeTransferETH(msg.sender, msg.value - totalAmount);\n    //     // }\n\n    //     // ensure you have enough premium in current contract as the coverContract will utilize\n    //     // safeTransferFrom for ERC20 token or\n    //     // check msg.value in case you are using native token\n\n    //     IInsureAce(coverContractAddress).buyCover{value: totalAmount}(\n    //         products,\n    //         durationInDays,\n    //         amounts,\n    //         currency,\n    //         owner,\n    //         referralCode,\n    //         premiumAmount,\n    //         helperParameters,\n    //         securityParameters,\n    //         v,\n    //         r,\n    //         s\n    //     );\n\n    //     // emit PurchasedProduct(coverContractAddress, \"InsureAce\", 0, msg.sender, currency, premiumAmount);\n    // }\n\n    function buyCoverByToken(\n        uint16[] memory products,\n        uint16[] memory durationInDays,\n        uint256[] memory amounts,\n        address currency,\n        address owner,\n        uint256 referralCode,\n        uint256 premiumAmount,\n        uint256[] memory helperParameters,\n        uint256[] memory securityParameters,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) external {\n        require(coverContractAddress != address(0), \"myOwnBuyCoverFunc:1\");\n\n        // ensure you have enough premium in current contract as the coverContract will utilize\n        // safeTransferFrom for ERC20 token or\n        // check msg.value in case you are using native token\n\n        IInsureAce(coverContractAddress).buyCover(\n            products,\n            durationInDays,\n            amounts,\n            currency,\n            owner,\n            referralCode,\n            premiumAmount,\n            helperParameters,\n            securityParameters,\n            v,\n            r,\n            s\n        );\n\n        // emit PurchasedProduct(coverContractAddress, \"InsureAce\", 0, msg.sender, currency, premiumAmount);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IInsureAce.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\ninterface IInsureAce {\n    function buyCover(\n        uint16[] memory products,\n        uint16[] memory durationInDays,\n        uint256[] memory amounts,\n        address currency,\n        address owner,\n        uint256 referralCode,\n        uint256 premiumAmount,\n        uint256[] memory helperParameters,\n        uint256[] memory securityParameters,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) external payable;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/offchain/P4LPolka.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IExchangeAgent.sol\";\nimport \"../libs/TransferHelper.sol\";\nimport \"./BasePolkaOffChain.sol\";\n\ncontract P4L is Ownable, ReentrancyGuard, BasePolkaOffChain {\n    event BuyP4L(uint256 indexed _productId, address _buyer, address _currency, uint256 _amount, uint256 _priceInUSD);\n\n    using Counters for Counters.Counter;\n\n    struct Product {\n        uint256 startTime;\n        uint128 priceInUSD; // price in USD\n        uint128 durPlan;\n        uint64 purchMonth;\n        string device;\n        string brand;\n    }\n\n    mapping(uint256 => Product) public products; // productId => product\n\n    constructor(\n        address _WETH,\n        address _exchangeAgent,\n        address _devWallet\n    ) BasePolkaOffChain(_WETH, _exchangeAgent, _devWallet) {}\n\n    /**\n     * @dev buyProductETH function:\n     * this function should be called from user directly\n     */\n    function buyProductByETH(\n        string memory _device,\n        string memory _brand,\n        uint256 _value,\n        uint256 _purchMonth,\n        uint256 _durPlan,\n        bytes memory sig\n    ) external payable nonReentrant {\n        bytes32 digest = getSignedMsgHash(_device, _brand, _value, _purchMonth, _durPlan);\n        permit(msg.sender, digest, sig);\n        uint256 tokenAmount = IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(WETH, _value);\n\n        require(msg.value >= tokenAmount, \"Insufficient amount\");\n        if (msg.value > tokenAmount) {\n            TransferHelper.safeTransferETH(msg.sender, msg.value - tokenAmount);\n        }\n        TransferHelper.safeTransferETH(devWallet, tokenAmount);\n\n        uint256 _pid = buyProduct(uint128(_value), uint128(_durPlan), uint64(_purchMonth), _device, _brand, msg.sender);\n        emit BuyP4L(_pid, msg.sender, WETH, tokenAmount, _value);\n    }\n\n    /**\n     * @dev buyProductByToken: Users can buy products using ERC20 tokens such as CVR and without gas fee\n     */\n    function buyProductByToken(\n        string memory _device,\n        string memory _brand,\n        uint256 _value,\n        uint256 _purchMonth,\n        uint256 _durPlan,\n        address _token,\n        address _sender,\n        bytes memory sig\n    ) external nonReentrant onlyAvailableToken(_token) {\n        bytes32 digest = getSignedMsgHash(_device, _brand, _value, _purchMonth, _durPlan);\n        permit(_sender, digest, sig);\n\n        uint256 tokenAmount = IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(_token, _value);\n        TransferHelper.safeTransferFrom(_token, _sender, devWallet, tokenAmount);\n        uint256 _pid = buyProduct(uint128(_value), uint128(_durPlan), uint64(_purchMonth), _device, _brand, _sender);\n\n        emit BuyP4L(_pid, _sender, _token, tokenAmount, _value);\n    }\n\n    function buyProduct(\n        uint128 _value,\n        uint128 _durPlan,\n        uint64 _purchMonth,\n        string memory _device,\n        string memory _brand,\n        address _sender\n    ) private returns (uint256 _pid) {\n        _pid = productIds.current();\n        products[_pid] = Product({\n            priceInUSD: _value, // price in USD\n            purchMonth: _purchMonth,\n            durPlan: _durPlan,\n            startTime: block.timestamp,\n            device: _device,\n            brand: _brand\n        });\n        _setProductOwner(_pid, _sender);\n        _increaseBalance(_sender);\n        _buyProduct(_sender, _pid);\n        productIds.increment();\n    }\n\n    function getSignedMsgHash(\n        string memory _device,\n        string memory _brand,\n        uint256 _value,\n        uint256 _purchMonth,\n        uint256 _durPlan\n    ) internal pure returns (bytes32) {\n        bytes32 msgHash = keccak256(abi.encodePacked(_device, _brand, _value, _purchMonth, _durPlan));\n        /*\n        Signature is produced by signing a keccak256 hash with the following format:\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\n        */\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", msgHash));\n    }\n}\n"
    },
    "contracts/offchain/BasePolkaOffChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BasePolkaOffChain is Ownable {\n    using Counters for Counters.Counter;\n\n    event BuyProduct(uint256 indexed _productId, address _buyer);\n\n    Counters.Counter public productIds;\n    mapping(uint256 => address) private _ownerOf; // productId => owner\n    mapping(address => uint64) private _balanceOf; // owner => balance We can think one user can buy max 2**64 products\n    mapping(address => uint64[]) private _productsOf; // owner => productIds[]\n    mapping(address => bool) public availableCurrencies;\n\n    address public immutable WETH;\n    // TODO should it be public?\n    address public exchangeAgent;\n    address public devWallet;\n\n    constructor(\n        address _WETH,\n        address _exchangeAgent,\n        address _devWallet\n    ) {\n        WETH = _WETH;\n        exchangeAgent = _exchangeAgent;\n        devWallet = _devWallet;\n    }\n\n    modifier onlyAvailableToken(address _token) {\n        require(availableCurrencies[_token], \"Not allowed token\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function _setProductOwner(uint256 _prodId, address _owner) internal {\n        _ownerOf[_prodId] = _owner;\n    }\n\n    function ownerOf(uint256 _prodId) public view returns (address) {\n        return _ownerOf[_prodId];\n    }\n\n    function _increaseBalance(address _account) internal {\n        _balanceOf[_account]++;\n    }\n\n    function balanceOf(address _account) public view returns (uint64) {\n        return _balanceOf[_account];\n    }\n\n    function _buyProduct(address _buyer, uint256 _pid) internal {\n        require(_pid < productIds.current(), \"Invalid product ID\");\n        _productsOf[_buyer].push(uint64(_pid));\n        emit BuyProduct(_pid, _buyer);\n    }\n\n    function productOf(address _owner, uint64 _idx) public view returns (uint64) {\n        return _productsOf[_owner][_idx];\n    }\n\n    function addCurrency(address _currency) external onlyOwner {\n        require(!availableCurrencies[_currency], \"Already available\");\n        availableCurrencies[_currency] = true;\n    }\n\n    function removeCurrency(address _currency) external onlyOwner {\n        require(availableCurrencies[_currency], \"Not available yet\");\n        availableCurrencies[_currency] = false;\n    }\n\n    function permit(\n        address _sender,\n        bytes32 _digest,\n        bytes memory sig\n    ) internal pure virtual {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\n        address recoveredAddress = ecrecover(_digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == _sender, \"PolkaCompare: INVALID_SIGNATURE\");\n    }\n\n    function splitSignature(bytes memory sig)\n        public\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        require(sig.length == 65, \"invalid signature length\");\n\n        assembly {\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // implicitly return (r, s, v)\n    }\n}\n"
    },
    "contracts/offchain/MSOPolka.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IExchangeAgent.sol\";\nimport \"../libs/TransferHelper.sol\";\nimport \"./BasePolkaOffChain.sol\";\n\ncontract MSOPolka is Ownable, ReentrancyGuard, BasePolkaOffChain {\n    using Counters for Counters.Counter;\n\n    event BuyMSO(\n        uint256 indexed _productId,\n        address _buyer,\n        address _currency,\n        uint256 _amount,\n        uint256 _priceInUSD,\n        uint256 _conciergePrice\n    );\n\n    struct Product {\n        string productName;\n        uint256 priceInUSD;\n        uint256 period;\n        uint256 startTime;\n        uint256 conciergePrice;\n    }\n\n    mapping(uint256 => Product) public products; // productId => product\n\n    constructor(\n        address _WETH,\n        address _exchangeAgent,\n        address _devWallet\n    ) BasePolkaOffChain(_WETH, _exchangeAgent, _devWallet) {}\n\n    /**\n     * @dev buyProductByETH function:\n     */\n    function buyProductByETH(\n        string memory productName,\n        uint256 priceInUSD,\n        uint256 period,\n        uint256 conciergePrice,\n        bytes memory sig\n    ) external payable nonReentrant {\n        uint256 usdPrice = priceInUSD + conciergePrice;\n\n        bytes32 digest = getSignedMsgHash(productName, priceInUSD, period, conciergePrice);\n        permit(msg.sender, digest, sig);\n\n        uint256 tokenAmount = IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(WETH, usdPrice);\n\n        require(msg.value >= tokenAmount, \"Insufficient amount\");\n        if (msg.value > tokenAmount) {\n            TransferHelper.safeTransferETH(msg.sender, msg.value - tokenAmount);\n        }\n        TransferHelper.safeTransferETH(devWallet, tokenAmount);\n\n        uint256 _pid = buyProduct(productName, priceInUSD, period, conciergePrice, msg.sender);\n\n        emit BuyMSO(_pid, msg.sender, WETH, tokenAmount, usdPrice, conciergePrice);\n    }\n\n    function getSender(\n        string memory productName,\n        uint256 priceInUSD,\n        uint256 period,\n        uint256 conciergePrice,\n        bytes32 r, bytes32 s, uint8 v\n    ) external pure returns(address) {\n\n        // bytes32 digest = getSignedMsgHash(productName, priceInUSD, period, conciergePrice);\n        bytes32 msgHash = keccak256(abi.encodePacked(productName, priceInUSD, period, conciergePrice));\n        // bytes32 msgHash = keccak256(abi.encodePacked(productName));\n        // bytes32 msgHash = keccak256(abi.encodePacked(productName));\n\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", msgHash));\n        // (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        return recoveredAddress;\n    }\n\n    /**\n     * @dev buyProductByToken function:\n     * TODO check restrict if only multisigwallet to access this function?\n     */\n    function buyProductByToken(\n        string memory productName,\n        uint256 priceInUSD,\n        uint256 period,\n        address _token,\n        uint256 conciergePrice,\n        address _sender,\n        bytes memory sig\n    ) external nonReentrant onlyAvailableToken(_token) {\n        uint256 usdPrice = priceInUSD + conciergePrice;\n\n        bytes32 digest = getSignedMsgHash(productName, priceInUSD, period, conciergePrice);\n        permit(_sender, digest, sig);\n\n        uint256 tokenAmount = IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(_token, usdPrice);\n        TransferHelper.safeTransferFrom(_token, _sender, devWallet, tokenAmount);\n\n        uint256 _pid = buyProduct(productName, priceInUSD, period, conciergePrice, _sender);\n\n        emit BuyMSO(_pid, _sender, _token, tokenAmount, usdPrice, conciergePrice);\n    }\n\n    function buyProduct(\n        string memory productName,\n        uint256 priceInUSD,\n        uint256 period,\n        uint256 conciergePrice,\n        address _sender\n    ) private returns (uint256 _pid) {\n        _pid = productIds.current();\n        products[_pid] = Product({\n            productName: productName,\n            priceInUSD: priceInUSD,\n            period: period,\n            startTime: block.timestamp,\n            conciergePrice: conciergePrice\n        });\n\n        _setProductOwner(_pid, _sender);\n        _increaseBalance(_sender);\n        _buyProduct(_sender, _pid);\n        productIds.increment();\n    }\n\n    function getSignedMsgHash(\n        string memory productName,\n        uint256 priceInUSD,\n        uint256 period,\n        uint256 conciergePrice\n    ) internal pure returns (bytes32) {\n        bytes32 msgHash = keccak256(abi.encodePacked(productName, priceInUSD, period, conciergePrice));\n        /*\n        Signature is produced by signing a keccak256 hash with the following format:\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\n        */\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", msgHash));\n    }\n}\n"
    },
    "contracts/libs/MultiSigWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract MultiSigWallet is ReentrancyGuard {\n    event Deposit(address indexed sender, uint256 amount, uint256 balance);\n    event SubmitTransaction(address indexed signer, uint256 indexed txIndex, address indexed to, uint256 value, bytes data);\n    event ConfirmTransaction(address indexed signer, uint256 indexed txIndex);\n    event RevokeConfirmation(address indexed signer, uint256 indexed txIndex);\n    event ExecuteTransaction(address indexed signer, uint256 indexed txIndex);\n\n    address[] public signers;\n    mapping(address => bool) public isSigner;\n    uint256 public numConfirmationsRequired;\n\n    struct Transaction {\n        address to;\n        uint256 value;\n        bytes data;\n        bool executed;\n        uint256 numConfirmations;\n    }\n\n    // mapping from tx index => signer => bool\n    mapping(uint256 => mapping(address => bool)) public isConfirmed;\n\n    Transaction[] private transactions;\n\n    modifier onlySigner() {\n        require(isSigner[msg.sender], \"not signer\");\n        _;\n    }\n\n    modifier txExists(uint256 _txIndex) {\n        require(_txIndex < transactions.length, \"tx does not exist\");\n        _;\n    }\n\n    modifier notExecuted(uint256 _txIndex) {\n        require(!transactions[_txIndex].executed, \"tx already executed\");\n        _;\n    }\n\n    modifier notConfirmed(uint256 _txIndex) {\n        require(!isConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\n        _;\n    }\n\n    constructor(address[] memory _signers, uint256 _numConfirmationsRequired) {\n        require(_signers.length > 0, \"signers required\");\n        require(\n            _numConfirmationsRequired > 0 && _numConfirmationsRequired <= _signers.length,\n            \"invalid number of required confirmations\"\n        );\n\n        for (uint256 i = 0; i < _signers.length; i++) {\n            address signer = _signers[i];\n\n            require(signer != address(0), \"invalid signer\");\n            require(!isSigner[signer], \"signer not unique\");\n\n            isSigner[signer] = true;\n            signers.push(signer);\n        }\n\n        numConfirmationsRequired = _numConfirmationsRequired;\n    }\n\n    receive() external payable {\n        emit Deposit(msg.sender, msg.value, address(this).balance);\n    }\n\n    /**\n     * @dev when buying is failed, agent should send loan again to TribeOne.\n     */\n    function submitTransaction(\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    ) public payable onlySigner nonReentrant {\n        if (_value > 0) {\n            require(msg.value == _value, \"Should send value\");\n        }\n        uint256 txIndex = transactions.length;\n\n        transactions.push(Transaction({to: _to, value: _value, data: _data, executed: false, numConfirmations: 0}));\n\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\n    }\n\n    function confirmTransaction(uint256 _txIndex, bool _execute)\n        public\n        onlySigner\n        txExists(_txIndex)\n        notExecuted(_txIndex)\n        notConfirmed(_txIndex)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n        isConfirmed[_txIndex][msg.sender] = true;\n        transaction.numConfirmations += 1;\n\n        emit ConfirmTransaction(msg.sender, _txIndex);\n\n        if (transaction.numConfirmations >= numConfirmationsRequired && _execute) {\n            _executeTransaction(_txIndex);\n        }\n    }\n\n    /**\n     * @dev We did not add onlySigner modifier here, because we want to allow any community member to execute transaction\n     * which had got at least minimum number of confirmations\n     */\n    function executeTransaction(uint256 _txIndex) external {\n        _executeTransaction(_txIndex);\n    }\n\n    function _executeTransaction(uint256 _txIndex) private txExists(_txIndex) notExecuted(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(transaction.numConfirmations >= numConfirmationsRequired, \"cannot execute tx\");\n\n        transaction.executed = true;\n\n        (bool success, ) = transaction.to.call{value: transaction.value}(transaction.data);\n        require(success, \"tx failed\");\n\n        emit ExecuteTransaction(msg.sender, _txIndex);\n    }\n\n    function revokeConfirmation(uint256 _txIndex) public onlySigner txExists(_txIndex) notExecuted(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(isConfirmed[_txIndex][msg.sender], \"tx not confirmed\");\n\n        transaction.numConfirmations -= 1;\n        isConfirmed[_txIndex][msg.sender] = false;\n\n        emit RevokeConfirmation(msg.sender, _txIndex);\n    }\n\n    function getSigners() public view returns (address[] memory) {\n        return signers;\n    }\n\n    function getTransactionCount() public view returns (uint256) {\n        return transactions.length;\n    }\n\n    function getTransaction(uint256 _txIndex)\n        public\n        view\n        returns (\n            address to,\n            uint256 value,\n            bytes memory data,\n            bool executed,\n            uint256 numConfirmations\n        )\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        return (transaction.to, transaction.value, transaction.data, transaction.executed, transaction.numConfirmations);\n    }\n}\n"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract MockERC20 is Ownable, ERC20 {\r\n    uint256 INITIAL_SUPPLY = 1000000000000 * 10**18;\r\n\r\n    mapping(address => uint256) private _faucets;\r\n    uint256 public constant faucetLimit = 500000 * 10**18;\r\n\r\n    constructor(string memory _name_, string memory _symbol_) ERC20(_name_, _symbol_) {\r\n        _mint(msg.sender, INITIAL_SUPPLY);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}